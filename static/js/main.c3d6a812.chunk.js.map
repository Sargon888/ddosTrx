{"version":3,"sources":["App.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","refreshBalance","asyncToGenerator","regenerator_default","a","mark","_callee","tronWeb","wrap","_context","prev","next","window","t0","state","address","t1","trx","getBalance","t2","sent","t3","balance","setState","stop","gettoken","_callee2","_context2","contract","getToken","send","then","output","console","group","log","tokenBalance","toString","groupEnd","changeAutoRun","_callee3","_context3","autoRun","setDefaultBlock","defaultAddress","base58","fromHex","artifact","_react_16_11_0_react_default","createElement","onClick","className","Component","waitForGlobal","_ref","nodes","isConnected","entries","map","_ref2","_ref3","slicedToArray","name","connected","error","concat","includes","ReactDOM","render","src_App_0","document","getElementById","setTimeout","apply","arguments"],"mappings":"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","file":"static/js/main.c3d6a812.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport * as artifact from './contracts/Token'\n\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        window.tronWeb.setDefaultBlock('latest');\n\n        this.contract = null;\n        this.state = {\n            address : null,\n            balance : null,\n            contract : null,\n            tokenBalance: null,\n            autoRun:false,\n        }\n    }\n\n    async componentDidMount() {\n\n        let tronWeb = window.tronWeb;\n        this.setState({address : tronWeb.defaultAddress.base58});\n        let address = tronWeb.address.fromHex(artifact.networks['*'].address);\n        console.log(artifact.abi, artifact.networks['*'].address, address)\n        this.contract = tronWeb.contract(artifact.abi, address);\n        console.log(this.contract)\n        await this.refreshBalance();\n    }\n\n\n    // onClick = async () => {\n    //     let tronWeb = window.tronWeb;\n    //     const sendTransaction = await tronWeb.trx.sendTransaction(\"TKPzfsXRaDmdKh2GuouXw2eyK2HNH9FNQS\", 1000);\n    //     console.log('- Transaction:\\n' + JSON.stringify(sendTransaction, null, 2), '\\n');\n    // };\n\n    refreshBalance = async () => {\n        let tronWeb = window.tronWeb;\n        this.state.address && (this.setState({balance : await tronWeb.trx.getBalance(this.address)}));\n    };\n\n    gettoken = async () => {\n        let tronWeb = window.tronWeb;\n        this.state.address &&  this.contract.getToken().send().then(output => {\n            console.group('Contract \"call\" result');\n            console.log('- Output:', output, '\\n');\n            this.setState({tokenBalance: output.toString()});\n            console.groupEnd();\n        });\n    };\n\n    changeAutoRun = async() => {\n        if (this.state.autoRun === false){\n            this.setState({autoRun : true});\n        }else{\n            this.setState({autoRun : false});\n        }\n    }\n\n\n    render() {\n        let button;\n        if (this.state.autoRun) {\n            button = <button onClick={this.changeAutoRun}>关闭自动执行</button>;\n          } else {\n            button = <button onClick={this.changeAutoRun}>打开自动执行</button>;\n          }\n        return (\n            <div className=\"App\">\n                <h1>14点开始！提前进去会被退钱</h1>\n                <div>\n                    <p>current address</p>\n                    <p>{this.state.address}</p>\n                    <hr></hr>\n                </div>\n\n                    <p>current trx balance</p>\n                    <p>{this.state.balance/1e6}</p>\n                    <button onClick={this.refreshBalance}>Refresh balance</button>\n                    <hr></hr>\n                <div>\n                </div>\n                    <p>get token</p>\n\n\n                    <p></p>\n                    {/* {button} */}\n\n                \n                    <button onClick={this.gettoken}>薅</button>\n                    <hr></hr>\n                \n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nvar waitForGlobal = async () =>{\n    // 1. check variable, 检查tronweb是否已经加载\n    if (window.tronWeb) {\n        let tronWeb = window.tronWeb;\n        // 2. check node connection，检查所需要的API是否都可以连通\n        const nodes = await tronWeb.isConnected();\n        const connected = !Object.entries(nodes).map(([name, connected]) => {\n            if (!connected) {\n                console.error(`Error: ${name} is not connected`);\n            }\n            return connected;\n        }).includes(false);\n        if (connected){\n            // 3. 如果一切正常，启动react应用。\n            ReactDOM.render(<App />, document.getElementById('root'));\n        } else {\n            console.error(`Error: TRON node is not connected`);\n            console.error('wait for tronLink');\n            setTimeout(async () => {\n                await waitForGlobal();\n            }, 100);\n        }\n\n    } else {\n        // 如果检测到没有注入tronWeb对象，则等待100ms后重新检测\n        console.error('wait for tronLink');\n        setTimeout(async () => {\n            await waitForGlobal();\n        }, 100);\n    }\n};\n\nwaitForGlobal().then();\n\n"],"sourceRoot":""}